{"version":3,"sources":["components/AjaxTable.js","components/AjaxTableNew.js","components/ButtonGroup.js","components/Buttons.js","components/CustomSelect.js","components/Datepicker.js","components/Grid.js","components/MySelect.js","components/MyTreeSelect.js","App.js","serviceWorker.js","index.js"],"names":["columns","title","dataIndex","sorter","render","name","first","last","width","filters","text","value","getRandomuserParams","params","results","pagination","pageSize","page","current","React","Component","AjaxTableNew","useState","loading","setLoading","data","setData","setPagination","useEffect","fetch","reqwest","url","method","type","then","console","log","total","rowKey","record","login","uuid","dataSource","onChange","sortField","field","sortOrder","order","ButtonGroup","Group","e","target","defaultValue","Button","Buttons","Option","Select","children","i","push","toString","all","ExportAudience","handleSubmit","preventDefault","props","form","validateFieldsAndScroll","err","values","handleSelectAll","length","includes","getFieldDecorator","this","labelCol","xs","span","sm","wrapperCol","onSubmit","hideRequiredMark","labelAlign","Item","label","validateTrigger","getValueFromEvent","rules","required","message","mode","placeholder","maxTagCount","Form","create","Datepicker","Grid","MySelect","showSearch","style","optionFilterProp","onFocus","onBlur","onSearch","val","filterOption","input","option","toLowerCase","indexOf","x","Array","from","_","allIds","map","MyTreeSelect","selectedValues","setSelectedValues","allowClear","treeCheckable","showCheckedStrategy","TreeSelect","SHOW_CHILD","dropdownStyle","maxHeight","ids","maxTagPlaceholder","omittedValues","treeData","Fragment","display","color","cursor","onClick","disableCheckbox","disabled","App","className","Boolean","window","location","hostname","match","Header","Layout","Footer","Sider","Content","ReactDOM","minHeight","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.10559e95.chunk.js","sourcesContent":["import { Table } from 'antd';\nimport React from 'react';\nimport reqwest from 'reqwest';\n\nconst columns = [\n\t{\n\t\ttitle: 'Name',\n\t\tdataIndex: 'name',\n\t\tsorter: true,\n\t\trender: (name) => `${name.first} ${name.last}`,\n\t\twidth: '20%',\n\t},\n\t{\n\t\ttitle: 'Gender',\n\t\tdataIndex: 'gender',\n\t\tfilters: [\n\t\t\t{ text: 'Male', value: 'male' },\n\t\t\t{ text: 'Female', value: 'female' },\n\t\t],\n\t\twidth: '20%',\n\t},\n\t{\n\t\ttitle: 'Email',\n\t\tdataIndex: 'email',\n\t},\n];\n\nconst getRandomuserParams = (params) => {\n\treturn {\n\t\tresults: params.pagination.pageSize,\n\t\tpage: params.pagination.current,\n\t\t...params,\n\t};\n};\n\nexport default class AjaxTable extends React.Component {\n\tstate = {\n\t\tdata: [],\n\t\tpagination: {\n\t\t\tcurrent: 1,\n\t\t\tpageSize: 10,\n\t\t},\n\t\tloading: false,\n\t};\n\n\tcomponentDidMount() {\n\t\tconst { pagination } = this.state;\n\t\tthis.fetch({ pagination });\n\t}\n\n\thandleTableChange = (pagination, filters, sorter) => {\n\t\tthis.fetch({\n\t\t\tsortField: sorter.field,\n\t\t\tsortOrder: sorter.order,\n\t\t\tpagination,\n\t\t\t...filters,\n\t\t});\n\t};\n\n\tfetch = (params = {}) => {\n\t\tthis.setState({ loading: true });\n\t\treqwest({\n\t\t\turl: 'https://randomuser.me/api',\n\t\t\tmethod: 'get',\n\t\t\ttype: 'json',\n\t\t\tdata: getRandomuserParams(params),\n\t\t}).then((data) => {\n\t\t\tconsole.log(data);\n\t\t\tthis.setState({\n\t\t\t\tloading: false,\n\t\t\t\tdata: data.results,\n\t\t\t\tpagination: {\n\t\t\t\t\t...params.pagination,\n\t\t\t\t\ttotal: 200,\n\t\t\t\t\t// 200 is mock data, you should read it from server\n\t\t\t\t\t// total: data.totalCount,\n\t\t\t\t},\n\t\t\t});\n\t\t});\n\t};\n\n\trender() {\n\t\tconst { data, pagination, loading } = this.state;\n\t\treturn (\n\t\t\t<Table\n\t\t\t\tcolumns={columns}\n\t\t\t\trowKey={(record) => record.login.uuid}\n\t\t\t\tdataSource={data}\n\t\t\t\tpagination={pagination}\n\t\t\t\tloading={loading}\n\t\t\t\tonChange={this.handleTableChange}\n\t\t\t/>\n\t\t);\n\t}\n}\n","import { Table } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport reqwest from 'reqwest';\n\nconst columns = [\n\t{\n\t\ttitle: 'Name',\n\t\tdataIndex: 'name',\n\t\tsorter: true,\n\t\trender: (name) => `${name.first} ${name.last}`,\n\t\twidth: '20%',\n\t},\n\t{\n\t\ttitle: 'Gender',\n\t\tdataIndex: 'gender',\n\t\tfilters: [\n\t\t\t{ text: 'Male', value: 'male' },\n\t\t\t{ text: 'Female', value: 'female' },\n\t\t],\n\t\twidth: '20%',\n\t},\n\t{\n\t\ttitle: 'Email',\n\t\tdataIndex: 'email',\n\t},\n];\n\nconst getRandomuserParams = (params) => {\n\treturn {\n\t\tresults: params.pagination.pageSize,\n\t\tpage: params.pagination.current,\n\t\t...params,\n\t};\n};\n\nfunction AjaxTableNew() {\n\tconst [loading, setLoading] = useState(false);\n\tconst [data, setData] = useState([]);\n\tconst [pagination, setPagination] = useState({\n\t\tcurrent: 1,\n\t\tpageSize: 10,\n\t});\n\n\tuseEffect(() => {\n\t\tfetch({ pagination });\n\t}, []);\n\n\tconst fetch = (params = {}) => {\n\t\tsetLoading(true);\n\t\treqwest({\n\t\t\turl: 'https://randomuser.me/api',\n\t\t\tmethod: 'get',\n\t\t\ttype: 'json',\n\t\t\tdata: getRandomuserParams(params),\n\t\t}).then((data) => {\n\t\t\tconsole.log(false);\n\t\t\tsetLoading(false);\n\t\t\tsetData(data.results);\n\t\t\tsetPagination({\n\t\t\t\t...params.pagination,\n\t\t\t\ttotal: 200,\n\t\t\t\t// 200 is mock data, you should read it from server\n\t\t\t\t// total: data.totalCount,\n\t\t\t});\n\t\t});\n\t};\n\n\tconst handleTableChange = (pagination, filters, sorter) => {\n\t\tfetch({\n\t\t\tsortField: sorter.field,\n\t\t\tsortOrder: sorter.order,\n\t\t\tpagination,\n\t\t\t...filters,\n\t\t});\n\t};\n\treturn (\n\t\t<div>\n\t\t\t<Table\n\t\t\t\tcolumns={columns}\n\t\t\t\trowKey={(record) => record.login.uuid}\n\t\t\t\tdataSource={data}\n\t\t\t\tpagination={pagination}\n\t\t\t\tloading={loading}\n\t\t\t\tonChange={handleTableChange}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default AjaxTableNew;\n","import React from 'react';\nimport { Radio } from 'antd';\n\nexport default function ButtonGroup() {\n\tfunction onChange(e) {\n\t\tconsole.log(`radio checked:${e.target.value}`);\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Radio.Group onChange={onChange} defaultValue=\"a\">\n\t\t\t\t<Radio.Button value=\"a\">Hangzhou</Radio.Button>\n\t\t\t\t<Radio.Button value=\"b\">Shanghai</Radio.Button>\n\t\t\t\t<Radio.Button value=\"c\">Beijing</Radio.Button>\n\t\t\t\t<Radio.Button value=\"d\">Chengdu</Radio.Button>\n\t\t\t</Radio.Group>\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport { Button } from 'antd';\n\nexport default function Buttons() {\n\treturn (\n\t\t<div>\n\t\t\t<Button type=\"primary\">Primary</Button>\n\t\t\t<Button>Default</Button>\n\t\t\t<Button type=\"dashed\">Dashed</Button>\n\t\t\t<Button type=\"danger\">Danger</Button>\n\t\t\t<Button type=\"link\">Link</Button>\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport 'antd/dist/antd.css';\nimport { Form, Select } from 'antd';\n\nconst { Option } = Select;\nconst children = [];\nfor (let i = 10; i < 35; i++) {\n\tchildren.push(\n\t\t<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>\n\t);\n}\nconst all = [];\nfor (let i = 10; i < 35; i++) {\n\tall.push(i.toString(36) + i);\n}\nclass ExportAudience extends React.Component {\n\thandleSubmit = e => {\n\t\te.preventDefault();\n\t\tthis.props.form.validateFieldsAndScroll((err, values) => {\n\t\t\tif (!err) {\n\t\t\t\tconsole.log('Received values of form: ', values);\n\t\t\t}\n\t\t});\n\t};\n\n\thandleSelectAll = value => {\n\t\tif (value && value.length && value.includes('all')) {\n\t\t\tif (value.length === all.length + 1) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\treturn [...all];\n\t\t} else {\n\t\t\treturn value;\n\t\t}\n\t};\n\n\trender() {\n\t\tconst { getFieldDecorator } = this.props.form;\n\t\tconst formItemLayout = {\n\t\t\tlabelCol: {\n\t\t\t\txs: { span: 24 },\n\t\t\t\tsm: { span: 8 },\n\t\t\t},\n\t\t\twrapperCol: {\n\t\t\t\txs: { span: 16 },\n\t\t\t\tsm: { span: 12 },\n\t\t\t},\n\t\t};\n\t\treturn (\n\t\t\t<Form\n\t\t\t\t{...formItemLayout}\n\t\t\t\tonSubmit={this.handleSubmit}\n\t\t\t\thideRequiredMark={false}\n\t\t\t\tlabelAlign={'right'}\n\t\t\t>\n\t\t\t\t<Form.Item label=\"Column Names\">\n\t\t\t\t\t{getFieldDecorator(`columnNames`, {\n\t\t\t\t\t\tvalidateTrigger: ['onChange', 'onBlur'],\n\t\t\t\t\t\tgetValueFromEvent: this.handleSelectAll,\n\t\t\t\t\t\trules: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\tmessage: 'Please input the Column Names!',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t})(\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tmode=\"multiple\"\n\t\t\t\t\t\t\tplaceholder=\"Please select Columns\"\n\t\t\t\t\t\t\tmaxTagCount={5}\n\t\t\t\t\t\t\tonChange={this.handleSelectAll}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Option key=\"all\" value=\"all\">\n\t\t\t\t\t\t\t\t---SELECT ALL---\n\t\t\t\t\t\t\t</Option>\n\t\t\t\t\t\t\t{children}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t)}\n\t\t\t\t</Form.Item>\n\t\t\t</Form>\n\t\t);\n\t}\n}\nconst WrappedExportForm = Form.create({ name: 'export' })(ExportAudience);\nexport default WrappedExportForm;\n\n// https://codesandbox.io/s/ant-design-tree-select-select-all-dnekz\n","import React from \"react\";\nimport { DatePicker } from \"antd\";\n\nexport default function Datepicker() {\n  return (\n    <div>\n      <DatePicker />\n    </div>\n  );\n}\n","import React from 'react';\nimport { Row, Col } from 'antd';\nimport { Button } from 'antd';\n\nexport default function Grid() {\n\treturn (\n\t\t<div>\n\t\t\t<Row>\n\t\t\t\t<Col span={12}>col-12</Col>\n\t\t\t\t<Col span={12}>col-12</Col>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<Col span={8}>col-8</Col>\n\t\t\t\t<Col span={8}>col-8</Col>\n\t\t\t\t<Col span={8}>\n\t\t\t\t\t<Button type=\"link\">Link</Button>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<Col span={6}>\n\t\t\t\t\t<Button type=\"primary\">Primary</Button>\n\t\t\t\t</Col>\n\t\t\t\t<Col span={6}>\n\t\t\t\t\t<Button>Default</Button>\n\t\t\t\t</Col>\n\t\t\t\t<Col span={6}>\n\t\t\t\t\t<Button type=\"dashed\">Dashed</Button>\n\t\t\t\t</Col>\n\t\t\t\t<Col span={6}>\n\t\t\t\t\t<Button type=\"danger\">Danger</Button>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport { Form, Input, Select, Row, Col } from 'antd';\n\nconst { Option } = Select;\n\nconst children = [];\n\nfor (let i = 10; i < 35; i++) {\n\tchildren.push(\n\t\t<Option key={i.toString(36) + i}>{i.toString(36) + i}</Option>\n\t);\n}\nconst all = [];\nfor (let i = 10; i < 35; i++) {\n\tall.push(i.toString(36) + i);\n}\n\n// https://codesandbox.io/s/ant-design-tree-select-select-all-dnekz\n// https://codesandbox.io/s/hungry-mountain-jw3s0\nexport default function MySelect() {\n\tfunction handleSelectAll(value) {\n\t\tconsole.log('vvvv value', value);\n\t\tif (value && value.length && value.includes('all')) {\n\t\t\tconsole.log('yes all included');\n\t\t\tif (value.length === all.length + 1) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\treturn [...all];\n\t\t} else {\n\t\t\treturn value;\n\t\t}\n\t}\n\n\tfunction onChange(value) {\n\t\tconsole.log(`selected ${value}`);\n\t}\n\n\tfunction onBlur() {\n\t\tconsole.log('blur');\n\t}\n\n\tfunction onFocus() {\n\t\tconsole.log('focus');\n\t}\n\n\tfunction onSearch(val) {\n\t\tconsole.log('search:', val);\n\t}\n\n\treturn (\n\t\t<Row>\n\t\t\t<Col span={12}>\n\t\t\t\t<Select\n\t\t\t\t\tshowSearch\n\t\t\t\t\tstyle={{ width: 500 }}\n\t\t\t\t\tplaceholder=\"Select a person\"\n\t\t\t\t\toptionFilterProp=\"children\"\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t\tonFocus={onFocus}\n\t\t\t\t\tonBlur={onBlur}\n\t\t\t\t\tonSearch={onSearch}\n\t\t\t\t\tfilterOption={(input, option) =>\n\t\t\t\t\t\toption.props.children\n\t\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t\t.indexOf(input.toLowerCase()) >= 0\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\t<Option value=\"jack\">Jack</Option>\n\t\t\t\t\t<Option value=\"lucy\">Lucy</Option>\n\t\t\t\t\t<Option value=\"tom\">Tom</Option>\n\t\t\t\t</Select>\n\t\t\t</Col>\n\t\t\t<Col span={12}>\n\t\t\t\t<Select\n\t\t\t\t\tstyle={{ width: 500 }}\n\t\t\t\t\tmode=\"multiple\"\n\t\t\t\t\tplaceholder=\"Please select Columns\"\n\t\t\t\t\tmaxTagCount={5}\n\t\t\t\t\tonChange={handleSelectAll}\n\t\t\t\t>\n\t\t\t\t\t<Option key=\"all\" value=\"all\">\n\t\t\t\t\t\t---SELECT ALL---\n\t\t\t\t\t</Option>\n\t\t\t\t\t{children}\n\t\t\t\t</Select>\n\t\t\t</Col>\n\t\t</Row>\n\t);\n}\n","import React, { useState, useEffect } from 'react';\nimport { TreeSelect } from 'antd';\n\nconst x = Array.from({ length: 50 }, (_, i) => ({\n\ttitle: `Block ${i + 1}`,\n\tvalue: `${i + 1}`,\n}));\n\nx.push({ title: 'Block 1', value: 'a1' });\n\nconst allIds = x.map(({ value }) => value);\n\n// console.log('xxx', x);\n// console.log('allIds', allIds);\n\nexport default function MyTreeSelect() {\n\tconst [selectedValues, setSelectedValues] = useState([]);\n\n\tuseEffect(() => {\n\t\tconsole.log('selectedValues', selectedValues);\n\t}, [selectedValues]);\n\n\treturn (\n\t\t<TreeSelect\n\t\t\tallowClear={true}\n\t\t\tplaceholder=\"Select a block\"\n\t\t\ttreeCheckable={true}\n\t\t\tshowCheckedStrategy={TreeSelect.SHOW_CHILD}\n\t\t\tstyle={{ width: '350px' }}\n\t\t\tdropdownStyle={{ maxHeight: '300px' }}\n\t\t\tonChange={ids => setSelectedValues(ids)}\n\t\t\tvalue={selectedValues}\n\t\t\tmaxTagCount={2}\n\t\t\tmaxTagPlaceholder={omittedValues =>\n\t\t\t\t`+ ${omittedValues.length} entries ...`\n\t\t\t}\n\t\t\ttreeData={[\n\t\t\t\t{\n\t\t\t\t\ttitle: (\n\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t{selectedValues.length === x.length && (\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tdisplay: 'inline-block',\n\t\t\t\t\t\t\t\t\t\tcolor: '#ccc',\n\t\t\t\t\t\t\t\t\t\tcursor: 'not-allowed',\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tSelect all 1\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{selectedValues.length < x.length && (\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tonClick={() => setSelectedValues(allIds)}\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tdisplay: 'inline-block',\n\t\t\t\t\t\t\t\t\t\tcolor: '#286FBE',\n\t\t\t\t\t\t\t\t\t\tcursor: 'pointer',\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tSelect all 2\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t&nbsp;&nbsp;&nbsp;\n\t\t\t\t\t\t\t{selectedValues.length === 0 && (\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tdisplay: 'inline-block',\n\t\t\t\t\t\t\t\t\t\tcolor: '#ccc',\n\t\t\t\t\t\t\t\t\t\tcursor: 'not-allowed',\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tUnselect all 1\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t{selectedValues.length > 0 && (\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tonClick={() => setSelectedValues([])}\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tdisplay: 'inline-block',\n\t\t\t\t\t\t\t\t\t\tcolor: '#286FBE',\n\t\t\t\t\t\t\t\t\t\tcursor: 'pointer',\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tUnselect all 2\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t),\n\t\t\t\t\tvalue: 'xxx',\n\t\t\t\t\tdisableCheckbox: true,\n\t\t\t\t\tdisabled: true,\n\t\t\t\t},\n\t\t\t\t...x,\n\t\t\t]}\n\t\t/>\n\t);\n}\n","import React from 'react';\n// import './App.css';\nimport './App.less';\nimport {\n\t// CustomSelect,\n\t// AjaxTable,\n\tAjaxTableNew,\n\tButtonGroup,\n\tButtons,\n\tDatepicker,\n\tGrid,\n\tMySelect,\n\tMyTreeSelect,\n} from './components';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<ButtonGroup />\n\t\t\t<Datepicker />\n\t\t\t<Buttons />\n\t\t\t<Grid />\n\t\t\t<MySelect />\n\t\t\t<MyTreeSelect />\n\t\t\t{/* <CustomSelect /> */}\n\t\t\t{/* <AjaxTable /> */}\n\t\t\t<AjaxTableNew />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Layout } from 'antd';\n\nimport 'antd/dist/antd.css';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nconst { Header, Footer, Sider, Content } = Layout;\n\nReactDOM.render(\n\t<Layout style={{ minHeight: '100vh' }}>\n\t\t<Sider>Sider</Sider>\n\t\t<Layout>\n\t\t\t<Header>Header</Header>\n\t\t\t<Content>\n\t\t\t\t<App />\n\t\t\t</Content>\n\t\t\t<Footer>Footer</Footer>\n\t\t</Layout>\n\t</Layout>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}